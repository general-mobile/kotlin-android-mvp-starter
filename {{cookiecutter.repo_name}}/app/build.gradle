buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
{% if cookiecutter.kotlin_android_extensions == "y" %}
apply plugin: 'kotlin-android-extensions'
{% endif %}
{% if cookiecutter.realm == "y" %}
apply plugin: 'realm-android'
{% endif %}

def STRING = 'String'
def BUILD_TIME = 'BUILD_TIME'

apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion "26.0.0-rc2"

    defaultConfig {
        applicationId "{{ cookiecutter.package_name }}"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "{{ cookiecutter.version }}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField STRING, BUILD_TIME, "\"${rootProject.ext.buildTime}\""
    }
    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets{
	main.java.srcDirs += 'src/main/kotlin'
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //supportLib
    implementation rootProject.ext.supportLib
    implementation rootProject.ext.supportLibAppCompat
    implementation rootProject.ext.supportLibDesign
    implementation rootProject.ext.supportLibRecyclerview
    implementation rootProject.ext.supportLibCardview

    //timber
    implementation rootProject.ext.timber

    //crashlytics
    implementation (rootProject.ext.crashlytics){
        transitive = true;
    }

    //di
    implementation rootProject.ext.dagger
    kapt rootProject.ext.daggerApt
    //implementation rootProject.ext.daggerSupport
    //annotationProcessor rootProject.ext.daggerAnnotation

    //rx
    implementation rootProject.ext.rxJava
    implementation rootProject.ext.rxAndroid
    implementation rootProject.ext.rxKotlin

    {% if cookiecutter.retrofit == "y" %}
    //net
    implementation rootProject.ext.retrofit
    implementation rootProject.ext.okHttp
    implementation rootProject.ext.gson
    implementation rootProject.ext.rxJavaAdapter
    implementation rootProject.ext.gsonConverter
    {% endif %}

    {% if cookiecutter.image_downloader == "picasso" %}
    //picasso
    implementation rootProject.ext.picasso
    {% elif cookiecutter.image_downloader == "glide" %}
    //glide
    implementation rootProject.ext.glide
    implementation rootProject.ext.glideAnnotation
    {% endif %}

    {% if cookiecutter.materialize == "y" %}
    // Mike Penz - Materialize
    implementation rootProject.ext.materialize
    {% endif %}

    {% if cookiecutter.material_drawer == "y" %}
    // Mike Penz - Material Drawer
    implementation(rootProject.ext.materialDrawer) {
        transitive = true
    }
    {% endif %}

    {% if cookiecutter.kotlin_anko == "y" %}
    // Anko
    implementation rootProject.ext.ankoCommonV4Support
    implementation rootProject.ext.ankoCommonV4SupportCommon
    implementation rootProject.ext.ankoCommon
    implementation rootProject.ext.ankoCompat
    implementation rootProject.ext.ankoCompatCoroutines
    implementation rootProject.ext.ankoCardView
    implementation rootProject.ext.ankoDesign
    implementation rootProject.ext.ankoDesignCoroutines
    implementation rootProject.ext.ankoGridLayout
    implementation rootProject.ext.ankoPercent
    implementation rootProject.ext.ankoRecyclerView
    implementation rootProject.ext.ankoRecyclerViewCoroutines
    {% endif %}

    //lifecycles, licedata, viewmodel
    {% if cookiecutter.architecture == "y" %}
    implementation rootProject.ext.architectureLifecycleRuntime = "android.arch.lifecycle:runtime:$architectureVersion"
    implementation rootProject.ext.architectureLifecycleExtensions = "android.arch.lifecycle:extensions:$architectureVersion"
    annotationProcessor rootProject.ext.architectureLifecycleAnnotation = "android.arch.lifecycle:compiler:$architectureVersion"

    {% if cookiecutter.room == "y" %}
    // Room
    implementation rootProject.ext.roomRuntime
    implementation rootProject.ext.roomRx
    annotationProcessor rootProject.ext.roomAnnotation
    {% endif %}
    {% endif %}


    {% if cookiecutter.parceler == "y" %}
    // Parceler
    implementation rootProject.ext.parcelerAPI
    annotationProcessor rootProject.ext.parcelerAnnotation
    {% endif %}

    //test
    testImplementation 'junit:junit:4.12'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs'
    })
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}
repositories {
    mavenCentral()
}
